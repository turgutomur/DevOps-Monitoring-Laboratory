services:
  # Web Application
  webapp:
    build: 
      context: ./webapp
      dockerfile: Dockerfile
    container_name: devops-webapp
    ports:
      - "${APP_PORT:-7070}:7070"
    environment:
      - APP_NAME=${APP_NAME:-DevOps Monitoring WebApp}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - DEBUG_MODE=${DEBUG_MODE:-false}
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7070"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: nginx-server
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    environment:
      - NGINX_LOG_LEVEL=${NGINX_LOG_LEVEL:-warn}
    depends_on:
      - webapp
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx_status"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Prometheus Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    environment:
      - SCRAPE_URI=http://nginx:80/nginx_status
      - TELEMETRY_PATH=/metrics
      - NGINX_RETRIES=10
    depends_on:
      - nginx
    networks:
      - monitoring
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    environment:
      - PROMETHEUS_RETENTION_TIME=${PROMETHEUS_RETENTION_TIME:-15d}
      - PROMETHEUS_RETENTION_SIZE=${PROMETHEUS_RETENTION_SIZE:-10GB}
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-10GB}'
      - '--web.enable-lifecycle'
    depends_on:
      - webapp
      - nginx-exporter
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_SECRET_KEY=${GF_SECURITY_SECRET_KEY:-DefaultSecretKey}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
      - GF_USERS_DEFAULT_THEME=${GF_USERS_DEFAULT_THEME:-dark}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS:-grafana-piechart-panel}
      - GF_LOG_LEVEL=${GF_LOG_LEVEL:-info}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped
    user: "472:472"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16