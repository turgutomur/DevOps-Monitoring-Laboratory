name: 🚀 DevOps Monitoring Stack CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *'

env:
  COMPOSE_FILE: docker-compose.yml
  HEALTH_CHECK_TIMEOUT: 120

jobs:
  lint-and-validate:
    name: 🔍 Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐳 Validate Docker Compose
        run: |
          echo "🔍 Validating docker-compose.yml..."
          docker compose config
          echo "✅ Docker Compose is valid!"
          
      - name: 📋 Check Required Files
        run: |
          echo "🔍 Checking required files..."
          
          required_files=(
            "docker-compose.yml"
            "prometheus/prometheus.yml" 
            "nginx/nginx.conf"
            "README.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing!"
              exit 1
            fi
          done
          
          echo "✅ All required files present!"
          
      - name: 📊 Show Project Info
        run: |
          echo "📊 Project Information:"
          echo "  Prometheus config size: $(wc -c < prometheus/prometheus.yml) bytes"
          echo "  Nginx config size: $(wc -c < nginx/nginx.conf) bytes"
          echo "  Docker services:"
          docker compose config --services | sed 's/^/    - /'
          echo "✅ Validation completed!"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🛡️ Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  integration-test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan]
    strategy:
      matrix:
        test-scenario: [basic, load-test]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐳 Start monitoring stack
        run: |
          echo "🚀 Starting all services..."
          docker compose up -d
          echo "📊 Services started, checking containers..."
          docker compose ps
          
      - name: ⏳ Wait for services to be ready
        run: |
          echo "⏳ Waiting for services to initialize..."
          sleep 120
          
          echo "🔍 Service status after 2 minutes:"
          docker compose ps
          
      - name: 🧪 Health Check Tests
        run: |
          echo "=== 🌐 Testing Web Application ==="
          for i in {1..8}; do
            if curl -f -s http://localhost:7070; then
              echo "✅ Web app responding (attempt $i)"
              break
            fi
            echo "⏳ Web app not ready, waiting... (attempt $i/8)"
            sleep 15
          done
          
          echo "=== 📊 Testing Prometheus ==="
          for i in {1..8}; do
            if curl -f -s http://localhost:9090/-/healthy; then
              echo "✅ Prometheus healthy (attempt $i)"
              break
            fi
            echo "⏳ Prometheus not ready, waiting... (attempt $i/8)"
            sleep 15
          done
          
          echo "=== 📈 Testing Grafana ==="
          grafana_ready=false
          for i in {1..10}; do
            if curl -f -s -m 10 http://localhost:3000/api/health; then
              echo "✅ Grafana healthy (attempt $i)"
              grafana_ready=true
              break
            fi
            echo "⏳ Grafana not ready, waiting... (attempt $i/10)"
            sleep 20
          done
          
          if [ "$grafana_ready" = false ]; then
            echo "⚠️ Grafana didn't become ready, but continuing..."
          fi
          
          echo "=== 🔢 Testing Nginx Exporter ==="
          for i in {1..6}; do
            if curl -f -s http://localhost:9113/metrics | grep -q "nginx_up"; then
              echo "✅ Nginx Exporter working (attempt $i)"
              break
            fi
            echo "⏳ Nginx Exporter not ready, waiting... (attempt $i/6)"
            sleep 15
          done
          
      - name: 📊 Basic Metrics Check
        run: |
          echo "=== 📊 Basic Metrics Validation ==="
          
          echo "🎯 Checking Prometheus targets..."
          curl -s "http://localhost:9090/api/v1/targets" | head -100 || echo "⚠️ Targets check failed"
          
          echo "🔍 Testing basic query..."
          curl -s "http://localhost:9090/api/v1/query?query=up" | head -100 || echo "⚠️ Query failed"
          
      - name: 🚨 Simple Load Test
        if: matrix.test-scenario == 'load-test'
        run: |
          echo "=== 🚨 Running Simple Load Test ==="
          
          # Check service first
          if ! curl -f -s http://localhost:7070 > /dev/null; then
            echo "❌ Service not available for load testing"
            exit 1
          fi
          
          echo "✅ Service available, running load test..."
          
          # Simple curl-based load test
          echo "🔥 Running 20 requests with 2 concurrent..."
          for batch in {1..10}; do
            echo "Batch $batch/10..."
            (curl -s -o /dev/null http://localhost:7070/ && echo "  Request 1: OK") &
            (curl -s -o /dev/null http://localhost:7070/ && echo "  Request 2: OK") &
            wait
            sleep 1
          done
          
          echo "✅ Load test completed!"
          
      - name: 📋 Generate Test Report
        if: always()
        run: |
          echo "=== 📋 Test Report ===" > test-report.txt
          echo "Date: $(date)" >> test-report.txt
          echo "Test Scenario: ${{ matrix.test-scenario }}" >> test-report.txt
          echo "Container Status:" >> test-report.txt
          docker compose ps >> test-report.txt
          echo "" >> test-report.txt
          echo "Service Logs (last 30 lines):" >> test-report.txt
          docker compose logs --tail=30 >> test-report.txt
          
      - name: 📤 Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.test-scenario }}
          path: test-report.txt
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          docker compose down -v

  deployment-ready:
    name: 🚢 Deployment Ready
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🏷️ Create Release Info
        run: |
          VERSION="v$(date +%Y.%m.%d)-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "🏷️ Version: $VERSION"
          
      - name: 📦 Final Validation
        run: |
          echo "📦 Running final validation..."
          docker compose up -d
          sleep 90
          
          curl -f http://localhost:7070 || echo "⚠️ Web app check failed"
          curl -f http://localhost:9090/-/healthy || echo "⚠️ Prometheus check failed"
          curl -f http://localhost:3000/api/health || echo "⚠️ Grafana check failed"
          
          docker compose down
          echo "✅ Deployment validation completed!"

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [integration-test, deployment-ready]
    if: always()
    steps:
      - name: 📧 Success Notification
        if: needs.integration-test.result == 'success'
        run: |
          echo "🎉 SUCCESS: CI/CD Pipeline completed successfully!"
          echo "📊 All integration tests passed"
          echo "🚀 Ready for deployment"
          
      - name: 🚨 Failure Notification
        if: failure()
        run: |
          echo "❌ FAILURE: CI/CD Pipeline failed!"
          echo "🔍 Please check the workflow logs for details"